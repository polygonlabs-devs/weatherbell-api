/**
 * Weather API for Vizrt
 * This is a Weather API to provide Weather Data to a Vizrt Graphics System
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Humidity', 'model/Ice', 'model/Pressure', 'model/Rain', 'model/Snow', 'model/SunMoon', 'model/Temperature', 'model/Wind'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Humidity'), require('./Ice'), require('./Pressure'), require('./Rain'), require('./Snow'), require('./SunMoon'), require('./Temperature'), require('./Wind'));
  } else {
    // Browser globals (root is window)
    if (!root.WeatherApiForVizrt) {
      root.WeatherApiForVizrt = {};
    }
    root.WeatherApiForVizrt.Conditions = factory(root.WeatherApiForVizrt.ApiClient, root.WeatherApiForVizrt.Humidity, root.WeatherApiForVizrt.Ice, root.WeatherApiForVizrt.Pressure, root.WeatherApiForVizrt.Rain, root.WeatherApiForVizrt.Snow, root.WeatherApiForVizrt.SunMoon, root.WeatherApiForVizrt.Temperature, root.WeatherApiForVizrt.Wind);
  }
}(this, function(ApiClient, Humidity, Ice, Pressure, Rain, Snow, SunMoon, Temperature, Wind) {
  'use strict';




  /**
   * The Conditions model module.
   * @module model/Conditions
   * @version 1.0.3
   */

  /**
   * Constructs a new <code>Conditions</code>.
   * @alias module:model/Conditions
   * @class
   */
  var exports = function() {
    var _this = this;
















  };

  /**
   * Constructs a <code>Conditions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Conditions} obj Optional instance to populate.
   * @return {module:model/Conditions} The populated <code>Conditions</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('descriptionShort')) {
        obj['descriptionShort'] = ApiClient.convertToType(data['descriptionShort'], 'String');
      }
      if (data.hasOwnProperty('icon')) {
        obj['icon'] = ApiClient.convertToType(data['icon'], 'String');
      }
      if (data.hasOwnProperty('visibility')) {
        obj['visibility'] = ApiClient.convertToType(data['visibility'], 'Number');
      }
      if (data.hasOwnProperty('cloudCover')) {
        obj['cloudCover'] = ApiClient.convertToType(data['cloudCover'], 'Number');
      }
      if (data.hasOwnProperty('uvIndex')) {
        obj['uvIndex'] = ApiClient.convertToType(data['uvIndex'], 'Number');
      }
      if (data.hasOwnProperty('airQuality')) {
        obj['airQuality'] = ApiClient.convertToType(data['airQuality'], 'String');
      }
      if (data.hasOwnProperty('rain')) {
        obj['rain'] = Rain.constructFromObject(data['rain']);
      }
      if (data.hasOwnProperty('snow')) {
        obj['snow'] = Snow.constructFromObject(data['snow']);
      }
      if (data.hasOwnProperty('ice')) {
        obj['ice'] = Ice.constructFromObject(data['ice']);
      }
      if (data.hasOwnProperty('temperature')) {
        obj['temperature'] = Temperature.constructFromObject(data['temperature']);
      }
      if (data.hasOwnProperty('pressure')) {
        obj['pressure'] = Pressure.constructFromObject(data['pressure']);
      }
      if (data.hasOwnProperty('humidity')) {
        obj['humidity'] = Humidity.constructFromObject(data['humidity']);
      }
      if (data.hasOwnProperty('wind')) {
        obj['wind'] = Wind.constructFromObject(data['wind']);
      }
      if (data.hasOwnProperty('sunMoon')) {
        obj['sunMoon'] = SunMoon.constructFromObject(data['sunMoon']);
      }
    }
    return obj;
  }

  /**
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * @member {String} descriptionShort
   */
  exports.prototype['descriptionShort'] = undefined;
  /**
   * @member {String} icon
   */
  exports.prototype['icon'] = undefined;
  /**
   * @member {Number} visibility
   */
  exports.prototype['visibility'] = undefined;
  /**
   * @member {Number} cloudCover
   */
  exports.prototype['cloudCover'] = undefined;
  /**
   * @member {Number} uvIndex
   */
  exports.prototype['uvIndex'] = undefined;
  /**
   * @member {String} airQuality
   */
  exports.prototype['airQuality'] = undefined;
  /**
   * @member {module:model/Rain} rain
   */
  exports.prototype['rain'] = undefined;
  /**
   * @member {module:model/Snow} snow
   */
  exports.prototype['snow'] = undefined;
  /**
   * @member {module:model/Ice} ice
   */
  exports.prototype['ice'] = undefined;
  /**
   * @member {module:model/Temperature} temperature
   */
  exports.prototype['temperature'] = undefined;
  /**
   * @member {module:model/Pressure} pressure
   */
  exports.prototype['pressure'] = undefined;
  /**
   * @member {module:model/Humidity} humidity
   */
  exports.prototype['humidity'] = undefined;
  /**
   * @member {module:model/Wind} wind
   */
  exports.prototype['wind'] = undefined;
  /**
   * @member {module:model/SunMoon} sunMoon
   */
  exports.prototype['sunMoon'] = undefined;



  return exports;
}));


