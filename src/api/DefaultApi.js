/**
 * Weather API for Vizrt
 * This is a Weather API to provide Weather Data to a Vizrt Graphics System
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PointData', 'model/Series'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PointData'), require('../model/Series'));
  } else {
    // Browser globals (root is window)
    if (!root.WeatherApiForVizrt) {
      root.WeatherApiForVizrt = {};
    }
    root.WeatherApiForVizrt.DefaultApi = factory(root.WeatherApiForVizrt.ApiClient, root.WeatherApiForVizrt.PointData, root.WeatherApiForVizrt.Series);
  }
}(this, function(ApiClient, PointData, Series) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.3
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the currentByLatLngGet operation.
     * @callback module:api/DefaultApi~currentByLatLngGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current weather data by latitude &amp; longitude
     * @param {Number} lat Latitude
     * @param {Number} lng Longitude
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.unitTemp Units (f, c, or k) (default to c)
     * @param {module:model/String} opts.unitWind Units (kph, mph, or knot) (default to knot)
     * @param {module:model/String} opts.unitRain Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitSnow Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitPressure Units (inHg, hPa, Pa, mb) (default to hPa)
     * @param {module:api/DefaultApi~currentByLatLngGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointData}
     */
    this.currentByLatLngGet = function(lat, lng, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling currentByLatLngGet");
      }

      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling currentByLatLngGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'lat': lat,
        'lng': lng,
        'unit_temp': opts['unitTemp'],
        'unit_wind': opts['unitWind'],
        'unit_rain': opts['unitRain'],
        'unit_snow': opts['unitSnow'],
        'unit_pressure': opts['unitPressure'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PointData;

      return this.apiClient.callApi(
        '/current/byLatLng', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the currentByLocationIdGet operation.
     * @callback module:api/DefaultApi~currentByLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns current weather data by Location ID
     * @param {String} locationId Location ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.unitTemp Units (f, c, or k) (default to c)
     * @param {module:model/String} opts.unitWind Units (kph, mph, or knot) (default to knot)
     * @param {module:model/String} opts.unitRain Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitSnow Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitPressure Units (inHg, hPa, Pa, mb) (default to hPa)
     * @param {module:api/DefaultApi~currentByLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointData}
     */
    this.currentByLocationIdGet = function(locationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling currentByLocationIdGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'locationId': locationId,
        'unit_temp': opts['unitTemp'],
        'unit_wind': opts['unitWind'],
        'unit_rain': opts['unitRain'],
        'unit_snow': opts['unitSnow'],
        'unit_pressure': opts['unitPressure'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PointData;

      return this.apiClient.callApi(
        '/current/byLocationId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastByLatLngGet operation.
     * @callback module:api/DefaultApi~forecastByLatLngGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Series} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns forecast data by latitude &amp; longitude
     * @param {Number} lat Latitude
     * @param {Number} lng Longitude
     * @param {Date} start Start date (in ISO8601 format)
     * @param {Date} end End date (in ISO8601 format)
     * @param {module:model/String} intervalType Interval type (day or hour)
     * @param {Number} interval Defines the time interval between each element. For example, hourly observations (or forecasts) can be retrieved by setting intervalType to hour and interval to 1.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.unitTemp Units (f, c, or k) (default to c)
     * @param {module:model/String} opts.unitWind Units (kph, mph, or knot) (default to knot)
     * @param {module:model/String} opts.unitRain Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitSnow Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitPressure Units (inHg, hPa, Pa, mb) (default to hPa)
     * @param {module:api/DefaultApi~forecastByLatLngGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Series}
     */
    this.forecastByLatLngGet = function(lat, lng, start, end, intervalType, interval, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling forecastByLatLngGet");
      }

      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling forecastByLatLngGet");
      }

      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling forecastByLatLngGet");
      }

      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling forecastByLatLngGet");
      }

      // verify the required parameter 'intervalType' is set
      if (intervalType === undefined || intervalType === null) {
        throw new Error("Missing the required parameter 'intervalType' when calling forecastByLatLngGet");
      }

      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling forecastByLatLngGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'lat': lat,
        'lng': lng,
        'start': start,
        'end': end,
        'intervalType': intervalType,
        'interval': interval,
        'unit_temp': opts['unitTemp'],
        'unit_wind': opts['unitWind'],
        'unit_rain': opts['unitRain'],
        'unit_snow': opts['unitSnow'],
        'unit_pressure': opts['unitPressure'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Series;

      return this.apiClient.callApi(
        '/forecast/byLatLng', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastByLocationIdGet operation.
     * @callback module:api/DefaultApi~forecastByLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Series} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns forecast data by Location ID
     * @param {String} locationId Location ID
     * @param {Date} start Start date (in ISO8601 format)
     * @param {Date} end End date (in ISO8601 format)
     * @param {module:model/String} intervalType Interval type (day or hour)
     * @param {Number} interval Defines the time interval between each element. For example, hourly observations (or forecasts) can be retrieved by setting intervalType to hour and interval to 1.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.unitTemp Units (f, c, or k) (default to c)
     * @param {module:model/String} opts.unitWind Units (kph, mph, or knot) (default to knot)
     * @param {module:model/String} opts.unitRain Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitSnow Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitPressure Units (inHg, hPa, Pa, mb) (default to hPa)
     * @param {module:api/DefaultApi~forecastByLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Series}
     */
    this.forecastByLocationIdGet = function(locationId, start, end, intervalType, interval, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling forecastByLocationIdGet");
      }

      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling forecastByLocationIdGet");
      }

      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling forecastByLocationIdGet");
      }

      // verify the required parameter 'intervalType' is set
      if (intervalType === undefined || intervalType === null) {
        throw new Error("Missing the required parameter 'intervalType' when calling forecastByLocationIdGet");
      }

      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling forecastByLocationIdGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'locationId': locationId,
        'start': start,
        'end': end,
        'intervalType': intervalType,
        'interval': interval,
        'unit_temp': opts['unitTemp'],
        'unit_wind': opts['unitWind'],
        'unit_rain': opts['unitRain'],
        'unit_snow': opts['unitSnow'],
        'unit_pressure': opts['unitPressure'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Series;

      return this.apiClient.callApi(
        '/forecast/byLocationId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the historicalByLatLngGet operation.
     * @callback module:api/DefaultApi~historicalByLatLngGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns historical Weather data by latitude, longitude &amp; timestamp
     * @param {Number} lat Latitude
     * @param {Number} lng Longitude
     * @param {Date} _date Date (in ISO8601 format)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.unitTemp Units (f, c, or k) (default to c)
     * @param {module:model/String} opts.unitWind Units (kph, mph, or knot) (default to knot)
     * @param {module:model/String} opts.unitRain Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitSnow Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitPressure Units (inHg, hPa, Pa, mb) (default to hPa)
     * @param {module:api/DefaultApi~historicalByLatLngGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointData}
     */
    this.historicalByLatLngGet = function(lat, lng, _date, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling historicalByLatLngGet");
      }

      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling historicalByLatLngGet");
      }

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling historicalByLatLngGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'lat': lat,
        'lng': lng,
        'date': _date,
        'unit_temp': opts['unitTemp'],
        'unit_wind': opts['unitWind'],
        'unit_rain': opts['unitRain'],
        'unit_snow': opts['unitSnow'],
        'unit_pressure': opts['unitPressure'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PointData;

      return this.apiClient.callApi(
        '/historical/byLatLng', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the historicalByLocationIdGet operation.
     * @callback module:api/DefaultApi~historicalByLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PointData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns historical Weather data by Location ID &amp; date
     * @param {String} locationId Location ID
     * @param {Date} _date Date (in ISO8601 format)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.unitTemp Units (f, c, or k) (default to c)
     * @param {module:model/String} opts.unitWind Units (kph, mph, or knot) (default to knot)
     * @param {module:model/String} opts.unitRain Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitSnow Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitPressure Units (inHg, hPa, Pa, mb) (default to hPa)
     * @param {module:api/DefaultApi~historicalByLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PointData}
     */
    this.historicalByLocationIdGet = function(locationId, _date, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling historicalByLocationIdGet");
      }

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling historicalByLocationIdGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'locationId': locationId,
        'date': _date,
        'unit_temp': opts['unitTemp'],
        'unit_wind': opts['unitWind'],
        'unit_rain': opts['unitRain'],
        'unit_snow': opts['unitSnow'],
        'unit_pressure': opts['unitPressure'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PointData;

      return this.apiClient.callApi(
        '/historical/byLocationId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the observationByLatLngGet operation.
     * @callback module:api/DefaultApi~observationByLatLngGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Series} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns observation data by latitude &amp; longitude
     * @param {Number} lat Latitude
     * @param {Number} lng Longitude
     * @param {Date} start Start date (in ISO8601 format)
     * @param {Date} end End date (in ISO8601 format)
     * @param {module:model/String} intervalType Interval type (day or hour)
     * @param {Number} interval Defines the time interval between each element. For example, hourly observations (or forecasts) can be retrieved by setting intervalType to hour and interval to 1.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showCumulative Whether or not to show cumulative data (default to true)
     * @param {module:model/String} opts.unitTemp Units (f, c, or k) (default to c)
     * @param {module:model/String} opts.unitWind Units (kph, mph, or knot) (default to knot)
     * @param {module:model/String} opts.unitRain Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitSnow Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitPressure Units (inHg, hPa, Pa, mb) (default to hPa)
     * @param {module:api/DefaultApi~observationByLatLngGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Series}
     */
    this.observationByLatLngGet = function(lat, lng, start, end, intervalType, interval, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling observationByLatLngGet");
      }

      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error("Missing the required parameter 'lng' when calling observationByLatLngGet");
      }

      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling observationByLatLngGet");
      }

      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling observationByLatLngGet");
      }

      // verify the required parameter 'intervalType' is set
      if (intervalType === undefined || intervalType === null) {
        throw new Error("Missing the required parameter 'intervalType' when calling observationByLatLngGet");
      }

      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling observationByLatLngGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'lat': lat,
        'lng': lng,
        'start': start,
        'end': end,
        'intervalType': intervalType,
        'interval': interval,
        'showCumulative': opts['showCumulative'],
        'unit_temp': opts['unitTemp'],
        'unit_wind': opts['unitWind'],
        'unit_rain': opts['unitRain'],
        'unit_snow': opts['unitSnow'],
        'unit_pressure': opts['unitPressure'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Series;

      return this.apiClient.callApi(
        '/observation/byLatLng', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the observationByLocationIdGet operation.
     * @callback module:api/DefaultApi~observationByLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Series} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns observation data by Location ID
     * @param {String} locationId Location ID
     * @param {Date} start Start date (in ISO8601 format)
     * @param {Date} end End date (in ISO8601 format)
     * @param {module:model/String} intervalType Interval type (day or hour)
     * @param {Number} interval Defines the time interval between each element. For example, hourly observations (or forecasts) can be retrieved by setting intervalType to hour and interval to 1.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showCumulative Whether or not to show cumulative data (default to true)
     * @param {module:model/String} opts.unitTemp Units (f, c, or k) (default to c)
     * @param {module:model/String} opts.unitWind Units (kph, mph, or knot) (default to knot)
     * @param {module:model/String} opts.unitRain Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitSnow Units (cm or in) (default to cm)
     * @param {module:model/String} opts.unitPressure Units (inHg, hPa, Pa, mb) (default to hPa)
     * @param {module:api/DefaultApi~observationByLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Series}
     */
    this.observationByLocationIdGet = function(locationId, start, end, intervalType, interval, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling observationByLocationIdGet");
      }

      // verify the required parameter 'start' is set
      if (start === undefined || start === null) {
        throw new Error("Missing the required parameter 'start' when calling observationByLocationIdGet");
      }

      // verify the required parameter 'end' is set
      if (end === undefined || end === null) {
        throw new Error("Missing the required parameter 'end' when calling observationByLocationIdGet");
      }

      // verify the required parameter 'intervalType' is set
      if (intervalType === undefined || intervalType === null) {
        throw new Error("Missing the required parameter 'intervalType' when calling observationByLocationIdGet");
      }

      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling observationByLocationIdGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'locationId': locationId,
        'start': start,
        'end': end,
        'intervalType': intervalType,
        'interval': interval,
        'showCumulative': opts['showCumulative'],
        'unit_temp': opts['unitTemp'],
        'unit_wind': opts['unitWind'],
        'unit_rain': opts['unitRain'],
        'unit_snow': opts['unitSnow'],
        'unit_pressure': opts['unitPressure'],
        'source': opts['source']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Series;

      return this.apiClient.callApi(
        '/observation/byLocationId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
