/**
 * Weather API for Vizrt
 * This is a Weather API to provide Weather Data to a Vizrt Graphics System
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WeatherApiForVizrt);
  }
}(this, function(expect, WeatherApiForVizrt) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WeatherApiForVizrt.Stats();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Stats', function() {
    it('should create an instance of Stats', function() {
      // uncomment below and update the code to test Stats
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be.a(WeatherApiForVizrt.Stats);
    });

    it('should have the property min24hrTemp (base name: "min24hrTemp")', function() {
      // uncomment below and update the code to test the property min24hrTemp
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property max24hrTemp (base name: "max24hrTemp")', function() {
      // uncomment below and update the code to test the property max24hrTemp
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property normalTempMin (base name: "normalTempMin")', function() {
      // uncomment below and update the code to test the property normalTempMin
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property normalTempMax (base name: "normalTempMax")', function() {
      // uncomment below and update the code to test the property normalTempMax
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property recordTempMin (base name: "recordTempMin")', function() {
      // uncomment below and update the code to test the property recordTempMin
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property recordTempMax (base name: "recordTempMax")', function() {
      // uncomment below and update the code to test the property recordTempMax
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property recordTempMinYear (base name: "recordTempMinYear")', function() {
      // uncomment below and update the code to test the property recordTempMinYear
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property recordTempMaxYear (base name: "recordTempMaxYear")', function() {
      // uncomment below and update the code to test the property recordTempMaxYear
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property normalRain (base name: "normalRain")', function() {
      // uncomment below and update the code to test the property normalRain
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property recordRainMin (base name: "recordRainMin")', function() {
      // uncomment below and update the code to test the property recordRainMin
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property recordRainMax (base name: "recordRainMax")', function() {
      // uncomment below and update the code to test the property recordRainMax
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property normalSnow (base name: "normalSnow")', function() {
      // uncomment below and update the code to test the property normalSnow
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property recordSnowMin (base name: "recordSnowMin")', function() {
      // uncomment below and update the code to test the property recordSnowMin
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

    it('should have the property recordSnowMax (base name: "recordSnowMax")', function() {
      // uncomment below and update the code to test the property recordSnowMax
      //var instane = new WeatherApiForVizrt.Stats();
      //expect(instance).to.be();
    });

  });

}));
